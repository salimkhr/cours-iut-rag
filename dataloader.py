import os
from typing import List, Dict
import re


def _add_list_item(stack, item, indent, level_indent=2):
    """
     Ajoute un √©l√©ment √† la liste en respectant le niveau de hi√©rarchie d√©fini.

    Cette fonction permet d‚Äôorganiser des √©l√©ments dans une structure imbriqu√©e en fonction
    de leur niveau d‚Äôindentation. Les √©l√©ments peuvent √™tre ajout√©s directement √† la liste
    ou int√©gr√©s dans un dictionnaire contenant des sous-√©l√©ments, selon leur niveau hi√©rarchique.

    :param stack: Liste dans laquelle les √©l√©ments sont ins√©r√©s. Elle peut contenir
                  des cha√Ænes de caract√®res ou des dictionnaires avec les cl√©s "content"
                  et "subitems".
    :type stack: list
    :param item: L‚Äô√©l√©ment √† ajouter √† la pile. Il peut s‚Äôagir d‚Äôune cha√Æne de caract√®res
                 ou de tout autre objet √† ins√©rer dans la structure.
    :type item: Any
    :param indent: Le niveau d‚Äôindentation utilis√© pour d√©terminer la position hi√©rarchique
                   de l‚Äô√©l√©ment dans la liste.
    :type indent: int
    :param level_indent: Nombre d‚Äôespaces (ou tabulations) repr√©sentant un niveau de hi√©rarchie.
                         Par d√©faut : 2.
    :type level_indent: int
    :return: Rien ; la pile est modifi√©e directement avec l‚Äô√©l√©ment ajout√© au bon niveau.
    :rtype: None
    """
    level = indent // level_indent

    def insert(stack, level, item):
        if level == 0:
            stack.append(item)
        else:
            last = stack[-1]
            if isinstance(last, str):
                last = {"content": last, "subitems": []}
                stack[-1] = last
            elif "subitems" not in last:
                last["subitems"] = []
            insert(last["subitems"], level - 1, item)

    insert(stack, level, item)


def _parse_markdown_table(table_lines):
    """
    Analyse un tableau au format Markdown et en extrait les en-t√™tes et les lignes.

    L‚Äôentr√©e attendue est une liste de lignes repr√©sentant un tableau Markdown, o√π chaque ligne
    correspond √† une ligne du tableau, et les cellules sont s√©par√©es par le caract√®re pipe `|`.
    Si une ligne de s√©paration valide (par exemple, "---") est d√©tect√©e, les en-t√™tes seront extraits
    de la premi√®re ligne ; sinon, aucun en-t√™te ne sera consid√©r√©.

    :param table_lines: Liste de cha√Ænes repr√©sentant les lignes d‚Äôun tableau Markdown.
                        Chaque ligne correspond √† une ligne du tableau, avec les cellules
                        s√©par√©es par des pipes `|`.
    :type table_lines: list[str]

    :return: Un dictionnaire contenant :
             - "type" : toujours √©gal √† "table" ;
             - "headers" : une liste de cha√Ænes repr√©sentant les en-t√™tes du tableau,
                           ou une liste vide s‚Äôil n‚Äôy en a pas ;
             - "rows" : une liste de listes repr√©sentant les lignes de donn√©es, o√π chaque sous-liste
                        correspond √† une ligne avec ses cellules.
    :rtype: dict
    """
    def split_row(line):
        return [cell.strip() for cell in line.strip().strip('|').split('|')]

    rows = [split_row(line) for line in table_lines if '|' in line]
    if len(rows) >= 2 and re.match(r"^-{2,}", rows[1][0]):
        headers = rows[0]
        data_rows = rows[2:]  # skip separator
    else:
        headers = []
        data_rows = rows

    return {
        "type": "table",
        "headers": headers,
        "rows": data_rows
    }

class CourseDataLoader:
    """
    G√®re le chargement et l‚Äôanalyse des donn√©es de cours stock√©es dans des fichiers Markdown.

    Cette classe offre des fonctionnalit√©s pour parcourir r√©cursivement un r√©pertoire contenant des fichiers Markdown,
    en extraire des blocs de contenu structur√©s, et les retourner dans un format organis√©.
    Les donn√©es extraites peuvent inclure diff√©rents types de contenu tels que des titres, listes, blocs de code,
    tableaux ou du texte g√©n√©ral.

    :ivar corpus_dir: Chemin vers le r√©pertoire contenant les fichiers Markdown des cours.
    :type corpus_dir: str
    """

    def __init__(self, corpus_dir: str):
        self.corpus_dir = corpus_dir

    def load_all_course_blocks(self) -> List[Dict]:
        course_blocks = []

        print(self.corpus_dir)

        if not os.path.exists(self.corpus_dir):
            print(f"‚ö†Ô∏è R√©pertoire corpus introuvable: {self.corpus_dir}")
            return course_blocks

        total_files = 0
        loaded_files = 0

        for root, _, files in os.walk(self.corpus_dir):
            for file in files:
                if file.endswith(".md"):
                    print(f"üìä Traitement de {file}")
                    total_files += 1
                    full_path = os.path.join(root, file)

                    try:
                        with open(full_path, encoding="utf-8") as f:
                            md_content = f.read()

                        blocks = self._parse_markdown_blocks(md_content)
                        if blocks:
                            course_blocks.append({
                                "file": os.path.relpath(full_path, self.corpus_dir),
                                "full_path": full_path,
                                "blocks": blocks,
                            })
                            loaded_files += 1
                        else:
                            print(f"‚ö†Ô∏è Aucun bloc extrait dans {full_path}")

                    except Exception as e:
                        print(f"‚ùå Erreur lors du chargement de {full_path}: {e}")

        print(f"üìä {loaded_files}/{total_files} fichiers charg√©s depuis {self.corpus_dir}")
        return course_blocks

    def _parse_markdown_blocks(self, md_content: str) -> List[Dict]:
        blocks = []
        lines = md_content.splitlines()
        buffer = []
        current_type = None
        list_stack = []

        def flush_buffer():
            nonlocal buffer, current_type, list_stack
            if current_type in ("list", "ordered_list") and list_stack:
                blocks.append({"type": current_type, "items": list_stack})
                list_stack = []
            elif buffer:
                content = "\n".join(buffer).strip()
                if content:
                    blocks.append({"type": current_type or "content", "content": content})
            elif current_type == "table" and buffer:
                table_block = _parse_markdown_table(buffer)
                blocks.append(table_block)
            buffer = []
            current_type = None

        in_code_block = False

        for line in lines:
            raw_line = line
            line = line.rstrip("\n")
            stripped = line.lstrip()
            indent = len(line) - len(stripped)

            # Bloc de code
            if stripped.startswith("```"):
                if not in_code_block:
                    flush_buffer()
                    in_code_block = True
                    current_type = "code"
                    buffer = []
                else:
                    flush_buffer()
                    in_code_block = False
                continue

            if in_code_block:
                buffer.append(raw_line)
                continue

            # Titre
            if stripped.startswith("#"):
                flush_buffer()
                level = len(stripped) - len(stripped.lstrip("#"))
                content = stripped.lstrip("#").strip()
                blocks.append({"type": "heading", "level": level, "content": content})
                continue

            # Tableau Markdown
            # D√©tection de ligne de tableau (ligne contenant des |)
            if "|" in line and re.search(r"\|", stripped):
                if current_type != "table":
                    flush_buffer()
                    current_type = "table"
                    buffer = []
                buffer.append(line)
                continue

            # En fin de bloc ou ligne vide : si tableau, on le parse
            if not stripped and current_type == "table":
                if buffer:
                    table_block = _parse_markdown_table(buffer)
                    blocks.append(table_block)
                    buffer = []
                    current_type = None
                continue

            # Liste ordonn√©e
            if re.match(r"^\d+\.\s", stripped):
                match = re.match(r"^(\d+\.)\s+(.*)", stripped)
                item = match.group(2)
                if current_type != "ordered_list":
                    flush_buffer()
                    current_type = "ordered_list"
                    list_stack = []
                _add_list_item(list_stack, item, indent)
                continue

            # Liste non ordonn√©e
            if re.match(r"^[-*+]\s", stripped):
                item = re.sub(r"^[-*+]\s+", "", stripped)
                if current_type != "list":
                    flush_buffer()
                    current_type = "list"
                    list_stack = []
                _add_list_item(list_stack, item, indent)
                continue

            # Ligne vide
            if not stripped:
                flush_buffer()
                continue

            # Par d√©faut : texte
            if current_type not in (None, "content"):
                flush_buffer()
            current_type = "content"
            buffer.append(line)

        flush_buffer()
        return blocks

    # Les autres m√©thodes (validation, infos, listing) peuvent √™tre adapt√©es selon les besoins
